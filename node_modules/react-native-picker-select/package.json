{
  "_args": [
    [
      {
        "raw": "react-native-picker-select",
        "scope": null,
        "escapedName": "react-native-picker-select",
        "name": "react-native-picker-select",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "/Users/shelllogix/Desktop/mynavigation"
    ]
  ],
  "_from": "react-native-picker-select",
  "_hasShrinkwrap": false,
  "_id": "react-native-picker-select@5.2.0",
  "_location": "/react-native-picker-select",
  "_nodeVersion": "8.12.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/react-native-picker-select_5.2.0_1545335330303_0.34411831792707215"
  },
  "_npmUser": {
    "name": "lfkwtz",
    "email": "michael@lefkowitz.me"
  },
  "_npmVersion": "6.4.1",
  "_phantomChildren": {},
  "_requested": {
    "raw": "react-native-picker-select",
    "scope": null,
    "escapedName": "react-native-picker-select",
    "name": "react-native-picker-select",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#USER"
  ],
  "_resolved": "https://registry.npmjs.org/react-native-picker-select/-/react-native-picker-select-5.2.0.tgz",
  "_shasum": "6968a0e5ad51601e7001056f28c70e0fe9ee1f1c",
  "_shrinkwrap": null,
  "_spec": "react-native-picker-select",
  "_where": "/Users/shelllogix/Desktop/mynavigation",
  "author": {
    "name": "Michael Lefkowitz",
    "email": "lefkowitz.michael@gmail.com"
  },
  "bugs": {
    "url": "https://github.com/lawnstarter/react-native-picker-select/issues"
  },
  "dependencies": {
    "lodash.isequal": "^4.5.0"
  },
  "description": "A Picker component for React Native which emulates the native <select> interfaces for each platform",
  "devDependencies": {
    "babel-jest": "^23.6.0",
    "babel-preset-react-native": "^4.0.1",
    "enzyme": "^3.7.0",
    "enzyme-adapter-react-16": "^1.7.0",
    "enzyme-to-json": "^3.3.5",
    "eslint-config-ls-react": "git+https://github.com/lawnstarter/eslint-config-ls-react.git#2.0.3",
    "husky": "^0.14.3",
    "jest": "^23.6.0",
    "prettier": "^1.15.3",
    "pretty-quick": "^1.8.0",
    "prop-types": "^15.6.2",
    "react": "16.6.1",
    "react-dom": "^16.6.1",
    "react-native": "0.57.7",
    "react-test-renderer": "^16.6.1"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-IDvfXgU0QCHn0Y4rWqs9E86HKnfmDukl1Y7PSg5yuItboVPF/CeczYr5iAFo+OnEU7QuVbzS9jlv+bj81bArYw==",
    "shasum": "6968a0e5ad51601e7001056f28c70e0fe9ee1f1c",
    "tarball": "https://registry.npmjs.org/react-native-picker-select/-/react-native-picker-select-5.2.0.tgz",
    "fileCount": 6,
    "unpackedSize": 32964,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJcG/IiCRA9TVsSAnZWagAAS1IQAI7NYqhgnjyfNKl2hdsP\nFgYaKa40+AcbSJnD1ukU17h4YGdds8GEhtgY2QaBoYYfQhIgyFbZgde7IF2v\nMVl2052USKv3J+rvqyxvkM7DO5TOEzC0CiwT7MlPPYZyNpdJcMMTrbB3uz03\notK/DbUycj+UPhWEebfRrCZLWieyuCUNCR3V043s/j0vMmTrzN68HkfCzZxi\nL6m0FKt4jn/e3S5vM2PB5znRnLDti7tO5OFohHBW3CXe/Y6TAb2yjaYa7twh\n/Z1B/AX57b5PNsc6BD8m16sWp1SeeD49eR84m4TEj236TRt8c+5JUaP3AnTe\noCZypk/DhDKIBi6GlWS13WI1h1i1x6x8ptlTCJT8zi4S9pwkOcMClEq74nyT\ndJQvXBTrFcpwjHfyiAPeWbmnObeAeQfXBosXmi5djLgBU2akZxw3RKkv0E/d\ne0u3/yo/qX7sAQ/CORRzutDJXz/juIgsmiDtActySYIWUKfS/w1oh8K3Otlu\nVkuLxv5WgCujk7RE8Nf+AClZNWt3ajAjbhvpfeJprHVh778dK5nQLTBCSjbd\nfI2lHgN5yd/wT7M5ApmvpFScu65iPtgATbM5mqfmnRO0TCe71LZpV14KxSjR\nUM43FpPlsvjNzNp3XigzPDg5bKqvOZH1q/5fM/v5XRHLshYxMeKNdiL3qQLn\nLO2U\r\n=9Vyq\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "files": [
    "LICENSE",
    "README.md",
    "index.d.ts",
    "src/index.js"
  ],
  "gitHead": "33b0902737794d52248d9b784c1a686ee90d7d44",
  "homepage": "https://github.com/lawnstarter/react-native-picker-select#readme",
  "jest": {
    "preset": "react-native",
    "setupFiles": [
      "./test/setup.js"
    ],
    "snapshotSerializers": [
      "enzyme-to-json/serializer"
    ]
  },
  "keywords": [
    "dropdown",
    "picker",
    "select",
    "react",
    "react-native",
    "react native",
    "expo",
    "items"
  ],
  "license": "MIT",
  "main": "src/index.js",
  "maintainers": [
    {
      "name": "lfkwtz",
      "email": "michael@lefkowitz.me"
    }
  ],
  "name": "react-native-picker-select",
  "optionalDependencies": {},
  "readme": "# react-native-picker-select\n\n[![npm version](https://badge.fury.io/js/react-native-picker-select.svg)](https://badge.fury.io/js/react-native-picker-select)\n[![npm downloads](https://img.shields.io/npm/dm/react-native-picker-select.svg?style=flat-square)](https://www.npmjs.com/package/react-native-picker-select)\n[![Test Coverage](https://api.codeclimate.com/v1/badges/095f5b1ee137705ed382/test_coverage)](https://codeclimate.com/github/lawnstarter/react-native-picker-select/test_coverage)\n[![CircleCI](https://circleci.com/gh/lawnstarter/react-native-picker-select.svg?style=svg)](https://circleci.com/gh/lawnstarter/react-native-picker-select)\n\nA Picker component for React Native which emulates the native `<select>` interfaces for iOS and Android\n\nFor iOS, we are wrapping a TextInput component. You can pass down your custom styling to match your other inputs.\n\nFor Android, we are using the native Picker component, but adding a pseudo-underline to emulate a typical TextInput. Additional styling can be passed down also to further customize the appearance.\n\nFor either platform, you can alternatively pass down a child element that will be wrapped in a touchable area, triggering the picker.\n\n![iOS Example](./example/ios-example.gif) ![Android Example](./example/android-example.gif)\n\n[Examples](https://github.com/lawnstarter/react-native-picker-select/tree/master/example)\n\n[Run example](https://snack.expo.io/@lfkwtz/react-native-picker-select)\n\n## Getting Started\n\n### Installing\n\n`npm install react-native-picker-select`\n\n### Versioning\n\n| Component | React   |\n| --------- | ------- |\n| >= 3.0.0  | >= 16.3 |\n| < 3.0.0   | < 16.3  |\n\n### Props\n\n| Name                        | Type           | Description                                                                                                                                                                                                                                                                                                                              | Required? | iOS / Android |\n| --------------------------- | -------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | --------- | ------------- |\n| onValueChange               | function       | Callback which returns `value, index`                                                                                                                                                                                                                                                                                                    | Y         | Both          |\n| items                       | array          | The items for the component to render<br> - Each item should be in the following format:<br>`{label: 'Orange', value: 'orange', key: 'orange', color: 'orange'}`<br>- The label and the value are required<br>- The key and color are optional<br>- The key will be set to the label if not included<br>- The value can be any data type | Y         | Both          |\n| placeholder                 | object         | - An override for the default placeholder object with a label of `Select an item...` and a value of `null`<br>- An empty object can be used if you'd like to disable the placeholder entirely                                                                                                                                            | N         | Both          |\n| disabled                    | boolean        | Disables interaction with the component                                                                                                                                                                                                                                                                                                  | N         | Both          |\n| value                       | any            | Will attempt to locate a matching item from the `items` array by checking each item's `value` property. If found, it will update the component to show that item as selected. If the value is not found, it will default to the first item.                                                                                              | N         | Both          |\n| itemKey                     | string, number | Will attempt to locate a matching item from the `items` array by checking each item's `key` property. If found, it will update the component to show that item as selected. If the key is not found, it will attempt to find a matching item by `value` as above.                                                                        | N         | Both          |\n| style                       | object         | Style overrides for most parts of the component. More details below.                                                                                                                                                                                                                                                                     | N         | Both          |\n| hideIcon                    | boolean        | Hides the floating downward arrow on the right side of the input box                                                                                                                                                                                                                                                                     | N         | Both          |\n| pickerProps                 | object         | Additional props to pass to the Picker (some props are used in core functionality so use this carefully)                                                                                                                                                                                                                                 | N         | Both          |\n| placeholderTextColor        | color          | Overrides the default placeholder color shown                                                                                                                                                                                                                                                                                            | N         | iOS           |\n| useNativeAndroidPickerStyle | boolean        | DEFAULTS TO TRUE. The component defaults to using the native React Native Picker in it's un-selected state. Setting this flag to false will mimic the default iOS presentation where a tappable TextInput is displayed. See more in the styling section.                                                                                 | N         | Android       |\n| hideDoneBar                 | boolean        | Hides the bar with tabbing arrows and Done link to exit the modal. While this is typical on `select` elements on the web, the [interface guidelines](https://developer.apple.com/ios/human-interface-guidelines/controls/pickers/) does not include it.                                                                                  | N         | iOS           |\n| onUpArrow / onDownArrow     | function       | Presence enables the corresponding arrow<br>- Closes the picker<br>- Calls the callback provided                                                                                                                                                                                                                                         | N         | iOS           |\n| onDonePress                 | function       | Callback when the 'Done' button is pressed                                                                                                                                                                                                                                                                                               | N         | iOS           |\n| onOpen / onClose            | function       | Callback triggered right before the opening or closing of the picker                                                                                                                                                                                                                                                                     | N         | iOS           |\n| modalProps                  | object         | Additional props to pass to the Modal (some props are used in core functionality so use this carefully)                                                                                                                                                                                                                                  | N         | iOS           |\n| textInputProps              | object         | Additional props to pass to the TextInput (some props are used in core functionality so use this carefully)                                                                                                                                                                                                                              | N         | iOS           |\n\n### Styling\n\n-   iOS\n    -   The component wraps a TextInput without styling. In the style prop, pass a style object named `inputIOS` to style the input\n    -   Alternatively, you can pass children (such as a custom button or input) for the component to wrap\n    -   Other styles that can be modified for iOS are named `inputIOSContainer`, `viewContainer`, `icon`, `chevron`, `chevronUp`, `chevronDown`, `chevronActive`, `done`, `modalViewTop`, `modalViewMiddle`, and `modalViewBottom`\n-   Android\n    -   The default Picker component acts similiarly to a TextInput until it is tapped, although it does not include an underline\n    -   We emulate a typical underline, which can be modified with a style object named `underline`\n    -   The main input can be modified with the style object named `inputAndroid`\n    -   Alternatively, you can pass children (such as a custom button or input) for the component to wrap\n    -   Other styles that can be modified for Android are named `headlessAndroidContainer` and `viewContainer`\n    -   If you set the prop `useNativeAndroidPickerStyle` to false, the component will allow two other style objects: `inputAndroidContainer` and `inputAndroid`\n\n## Testing\n\nThis component has been tested on React Native v0.51 - v0.57\n\n[![BrowserStack](https://i.imgur.com/cOdhMed.png)](https://www.browserstack.com/)\n\n## License\n\nreact-native-picker-select is [MIT licensed](https://github.com/lawnstarter/react-native-picker-select/tree/master/LICENSE) and built with :heart: in Austin, TX by the team at [LawnStarter](https://lawnstarter.com)\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/lawnstarter/react-native-picker-select.git"
  },
  "scripts": {
    "open:coverage": "open ./coverage/lcov-report/index.html",
    "precommit": "pretty-quick --staged",
    "preprettier:all": "yarn run prettier:debug-check",
    "prettier:all": "prettier --config ./.prettierrc.js --write \"{src,test}/**/*.js\"",
    "prettier:debug-check": "prettier --config ./.prettierrc.js --debug-check \"{src,test}/**/*.js\"",
    "test": "jest",
    "test:coverage": "jest --coverage",
    "test:watch": "jest --watch"
  },
  "version": "5.2.0"
}
